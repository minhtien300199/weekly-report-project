<div class="card">
    <div class="card-body">
        <h2 class="card-title mb-4">Google Search Console Report</h2>
        
        <div class="row mb-4">
            <div class="col-12 d-flex justify-content-between align-items-center">
                <div class="btn-group" role="group" aria-label="Quick date filters">
                    <button type="button" class="btn btn-outline-secondary" data-table-period="week">Last Week</button>
                    <button type="button" class="btn btn-outline-secondary" data-table-period="month">Last Month</button>
                    <button type="button" class="btn btn-outline-secondary" data-table-period="year">Last Year</button>
                </div>
                <div class="input-group">
                    <span class="input-group-text">Date Range</span>
                    <input type="date" class="form-control" id="startDate">
                    <input type="date" class="form-control" id="endDate">
                    <button class="btn btn-primary" id="fetchData">Fetch Data</button>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Top 10 Keywords by Impressions</h5>
                            <button class="btn btn-sm btn-outline-secondary" 
                                    onclick="copyTableToClipboard('keywordsTable')"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="left"
                                    title="Copy table to clipboard">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="keywordsTable" class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Keyword</th>
                                        <th>Impressions</th>
                                        <th>Clicks</th>
                                        <th>CTR</th>
                                        <th>Position</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Top 10 Pages by Clicks</h5>
                            <button class="btn btn-sm btn-outline-secondary"
                                    onclick="copyTableToClipboard('pagesTable')"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="left"
                                    title="Copy table to clipboard">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="pagesTable" class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Page</th>
                                        <th>Clicks</th>
                                        <th>Impressions</th>
                                        <th>CTR</th>
                                        <th>Position</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analysis Section for Top 10 -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Period Analysis</h5>
                            <button class="btn btn-sm btn-outline-secondary"
                                    onclick="copyAnalysisToClipboard('periodAnalysis')"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="left"
                                    title="Copy analysis to clipboard">
                                <i class="bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Performance Highlights</h6>
                                <ul class="list-unstyled" id="periodAnalysis">
                                    <li>Highest Impressions: <span class="text-primary" id="maxImp">-</span></li>
                                    <li>Lowest Impressions: <span class="text-primary" id="minImp">-</span></li>
                                    <li>Highest Clicks: <span class="text-primary" id="maxClick">-</span></li>
                                    <li>Lowest Clicks: <span class="text-primary" id="minClick">-</span></li>
                                    <li>Total Impressions: <span class="text-primary" id="totalImp">-</span></li>
                                    <li>Total Clicks: <span class="text-primary" id="totalClick">-</span></li>
                                    <li>Average Position: <span class="text-primary" id="avgPosition">-</span></li>
                                    <li>Average CTR: <span class="text-primary" id="avgCTR">-</span></li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6>Daily Averages</h6>
                                <ul class="list-unstyled" id="dailyAverages">
                                    <li>Daily Impressions: <span class="text-primary" id="avgDailyImp">-</span></li>
                                    <li>Daily Clicks: <span class="text-primary" id="avgDailyClick">-</span></li>
                                    <li>Best Performing Day: <span class="text-primary" id="bestDay">-</span></li>
                                    <li>Worst Performing Day: <span class="text-primary" id="worstDay">-</span></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Comparison Section -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Compare Impression Report</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-12 d-flex justify-content-between align-items-center">
                                <div class="btn-group" role="group" aria-label="Quick date filters">
                                    <button type="button" class="btn btn-outline-secondary" data-period="week">Week vs Previous Week</button>
                                    <button type="button" class="btn btn-outline-secondary" data-period="month">Month vs Previous Month</button>
                                    <button type="button" class="btn btn-outline-secondary" data-period="year">Year vs Previous Year</button>
                                </div>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="metricToggle">
                                    <label class="form-check-label" for="metricToggle">Show Clicks</label>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Period 1:</label>
                                <div class="input-group">
                                    <input type="date" class="form-control" id="period1Start">
                                    <input type="date" class="form-control" id="period1End">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Period 2:</label>
                                <div class="input-group">
                                    <input type="date" class="form-control" id="period2Start">
                                    <input type="date" class="form-control" id="period2End">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <button class="btn btn-primary" id="compareData">Compare Periods</button>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <canvas id="comparisonChart"></canvas>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Performance Analysis</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <h6>Period 1 Highlights</h6>
                                                <ul class="list-unstyled" id="period1Analysis">
                                                    <li>Highest Impressions: <span class="text-primary" id="p1MaxImp">-</span> (<span class="text-muted" id="p1MaxImpDate">-</span>)</li>
                                                    <li>Lowest Impressions: <span class="text-primary" id="p1MinImp">-</span> (<span class="text-muted" id="p1MinImpDate">-</span>)</li>
                                                    <li>Highest Clicks: <span class="text-primary" id="p1MaxClick">-</span> (<span class="text-muted" id="p1MaxClickDate">-</span>)</li>
                                                    <li>Lowest Clicks: <span class="text-primary" id="p1MinClick">-</span> (<span class="text-muted" id="p1MinClickDate">-</span>)</li>
                                                    <li>Total Impressions: <span class="text-primary" id="p1TotalImp">-</span></li>
                                                </ul>
                                            </div>
                                            <div class="col-md-6">
                                                <h6>Period 2 Highlights</h6>
                                                <ul class="list-unstyled" id="period2Analysis">
                                                    <li>Highest Impressions: <span class="text-primary" id="p2MaxImp">-</span> (<span class="text-muted" id="p2MaxImpDate">-</span>)</li>
                                                    <li>Lowest Impressions: <span class="text-primary" id="p2MinImp">-</span> (<span class="text-muted" id="p2MinImpDate">-</span>)</li>
                                                    <li>Highest Clicks: <span class="text-primary" id="p2MaxClick">-</span> (<span class="text-muted" id="p2MaxClickDate">-</span>)</li>
                                                    <li>Lowest Clicks: <span class="text-primary" id="p2MinClick">-</span> (<span class="text-muted" id="p2MinClickDate">-</span>)</li>
                                                    <li>Total Impressions: <span class="text-primary" id="p2TotalImp">-</span></li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-12">
                                                <h6>Period Comparison</h6>
                                                <ul class="list-unstyled" id="periodComparison">
                                                    <li>Impressions Change: <span id="impChange">-</span></li>
                                                    <li>Clicks Change: <span id="clickChange">-</span></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js"></script>
<style>
    /* Custom styles for tables */
    .table {
        width: 100%;
        margin-bottom: 0;
        font-size: 0.9rem;
    }
    
    .card-body {
        padding: 0.75rem;
    }
    
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    /* Adjust column widths */
    #pagesTable th:first-child,
    #keywordsTable th:first-child {
        min-width: 200px;
    }
    
    #pagesTable th:not(:first-child),
    #keywordsTable th:not(:first-child) {
        min-width: 80px;
    }
    
    /* Make tables more compact */
    .table td, .table th {
        padding: 0.5rem;
    }
    
    /* Ensure export buttons don't overflow */
    .dt-buttons {
        margin-bottom: 0.5rem;
    }
    
    /* Quick filter buttons styles */
    .btn-group {
        margin-bottom: 1rem;
    }
    
    .btn-group .btn {
        padding: 0.375rem 1rem;
    }
    
    .btn-group .btn.active {
        background-color: #0d6efd;
        color: white;
        border-color: #0d6efd;
    }
    
    @media (max-width: 768px) {
        .btn-group {
            display: flex;
            flex-direction: column;
            width: 100%;
        }
        
        .btn-group .btn {
            width: 100%;
            margin: 0.25rem 0;
            border-radius: 0.25rem !important;
        }
    }
    
    /* Toggle switch styles */
    .form-switch {
        padding-left: 2.5em;
    }
    
    .form-switch .form-check-input {
        width: 3em;
        height: 1.5em;
        cursor: pointer;
    }
    
    .form-check-label {
        cursor: pointer;
        margin-left: 0.5em;
    }
    
    /* Quick filter layout for tables */
    .input-group {
        max-width: 600px;
    }
    
    @media (max-width: 992px) {
        .col-12.d-flex {
            flex-direction: column;
            gap: 1rem;
        }
        
        .input-group {
            width: 100%;
            max-width: none;
        }
    }
    
    /* Active state for table filter buttons */
    [data-table-period].active {
        background-color: #0d6efd;
        color: white;
        border-color: #0d6efd;
    }

    .toast-container {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        z-index: 1050;
    }
</style>
<script>
    function copyAnalysisToClipboard(elementId) {
        const analysisElement = document.getElementById(elementId);
        const items = analysisElement.querySelectorAll('li');
        
        // Convert analysis data to formatted text
        let text = 'Period Analysis:\n\n';
        items.forEach(item => {
            // Get the label (everything before the colon)
            const label = item.textContent.split(':')[0];
            // Get all spans within the item
            const values = Array.from(item.querySelectorAll('span'))
                .map(span => span.textContent.trim())
                .join(' ');
            text += `${label}: ${values}\n`;
        });
        
        // Copy to clipboard
        navigator.clipboard.writeText(text).then(() => {
            showToast('Analysis copied to clipboard!');
        }).catch(err => {
            console.error('Failed to copy analysis:', err);
            alert('Failed to copy analysis to clipboard');
        });
    }

    async function takeScreenshot(element) {
        try {
            // Store all buttons in the card to hide them during screenshot
            const parentCard = element.closest('.card');
            const buttons = parentCard ? Array.from(parentCard.querySelectorAll('button')) : [];
            
            // Hide all buttons
            buttons.forEach(btn => {
                if (btn) {
                    btn._originalDisplay = btn.style.display;
                    btn.style.display = 'none';
                }
            });

            // First capture the chart canvas if it exists
            let chartCanvas = element.querySelector('canvas');
            let chartImageUrl;
            if (chartCanvas) {
                chartImageUrl = chartCanvas.toDataURL('image/png');
                // Create temporary image to replace canvas
                const img = document.createElement('img');
                img.src = chartImageUrl;
                img.style.width = '100%';
                img.style.height = 'auto';
                chartCanvas.parentNode.insertBefore(img, chartCanvas);
                chartCanvas.style.display = 'none';
            }

            // Wait for everything to render
            await new Promise(resolve => setTimeout(resolve, 500));

            // Take screenshot using dom-to-image
            const dataUrl = await domtoimage.toPng(element, {
                backgroundColor: '#ffffff',
                style: {
                    transform: 'none'
                },
                filter: function(node) {
                    // Skip any hidden elements
                    return node.style.display !== 'none';
                }
            });

            // Restore original chart canvas
            if (chartCanvas) {
                chartCanvas.style.display = '';
                chartCanvas.previousSibling.remove();
            }

            // Restore all buttons
            buttons.forEach(btn => {
                if (btn) {
                    btn.style.display = btn._originalDisplay || '';
                    delete btn._originalDisplay;
                }
            });

            // Ensure the dataUrl is valid
            if (!dataUrl || dataUrl.length < 100) {
                throw new Error('Invalid screenshot data');
            }

            // Convert dataUrl to blob
            const res = await fetch(dataUrl);
            const blob = await res.blob();

            try {
                // Validate blob
                if (!blob || blob.size === 0) {
                    throw new Error('Invalid blob data');
                }

                const item = new ClipboardItem({ "image/png": blob });
                await navigator.clipboard.write([item]);
                showToast('Screenshot copied to clipboard!');
            } catch (error) {
                console.error('Error copying to clipboard:', error);
                // Fallback to download
                try {
                    const link = document.createElement('a');
                    link.download = 'screenshot.png';
                    link.href = dataUrl;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } catch (downloadError) {
                    console.error('Failed to download:', downloadError);
                    alert('Failed to save screenshot');
                }
            }
        } catch (error) {
            console.error('Error taking screenshot:', error.message || error);
            alert('Failed to take screenshot. Please try again.');
            // Restore all buttons in case of error
            const parentCard = element.closest('.card');
            const buttons = parentCard ? Array.from(parentCard.querySelectorAll('button')) : [];
            buttons.forEach(btn => {
                if (btn) {
                    btn.style.display = btn._originalDisplay || '';
                    delete btn._originalDisplay;
                }
            });
        }
    }

    function copyTableToClipboard(tableId) {
        const table = document.getElementById(tableId);
        const rows = table.querySelectorAll('tr');
        
        // Convert table to tab-separated text (works for both Word and Excel)
        let text = '';
        rows.forEach(row => {
            const cells = row.querySelectorAll('th, td');
            const rowData = Array.from(cells).map(cell => cell.textContent.trim());
            text += rowData.join('\t') + '\n';
        });
        
        // Copy to clipboard
        navigator.clipboard.writeText(text).then(() => {
            showToast('Table copied to clipboard!');
        }).catch(err => {
            console.error('Failed to copy table:', err);
            alert('Failed to copy table to clipboard');
        });
    }

    function showToast(message) {
        // Create toast container if it doesn't exist
        let container = document.querySelector('.toast-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            document.body.appendChild(container);
        }

        // Create toast
        const toastEl = document.createElement('div');
        toastEl.className = 'toast align-items-center text-white bg-success border-0';
        toastEl.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        container.appendChild(toastEl);

        // Show toast
        const toast = new bootstrap.Toast(toastEl, {
            autohide: true,
            delay: 3000
        });
        toast.show();

        // Remove toast element after it's hidden
        toastEl.addEventListener('hidden.bs.toast', () => {
            toastEl.remove();
        });
    }

    $(document).ready(function() {
        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Function to calculate table date ranges
        function getTableDateRange(period) {
            const today = new Date();
            let startDate, endDate;

            switch(period) {
                case 'week':
                    endDate = new Date(today);
                    startDate = new Date(today);
                    startDate.setDate(endDate.getDate() - 7);
                    break;

                case 'month':
                    endDate = new Date(today);
                    startDate = new Date(today);
                    startDate.setDate(endDate.getDate() - 30);
                    break;

                case 'year':
                    endDate = new Date(today);
                    startDate = new Date(today);
                    startDate.setFullYear(endDate.getFullYear() - 1);
                    break;
            }

            return {
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0]
            };
        }

        // Handle table quick filter clicks
        $('[data-table-period]').click(function() {
            const period = $(this).data('tablePeriod');
            const dates = getTableDateRange(period);
            
            // Set the date inputs
            $('#startDate').val(dates.startDate);
            $('#endDate').val(dates.endDate);
            
            // Trigger the fetch
            $('#fetchData').click();
            
            // Update active state of buttons
            $('[data-table-period]').removeClass('active');
            $(this).addClass('active');
        });

        // Set default dates for all date inputs
        function setDefaultDates() {
            const today = new Date();
            
            // For main tables (last 28 days)
            const startDate = new Date(today);
            startDate.setDate(today.getDate() - 28);
            $('#startDate').val(startDate.toISOString().split('T')[0]);
            $('#endDate').val(today.toISOString().split('T')[0]);
            
            // For comparison (last month vs current month)
            const firstDayThisMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDayThisMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            const firstDayLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
            const lastDayLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);

            $('#period1Start').val(firstDayLastMonth.toISOString().split('T')[0]);
            $('#period1End').val(lastDayLastMonth.toISOString().split('T')[0]);
            $('#period2Start').val(firstDayThisMonth.toISOString().split('T')[0]);
            $('#period2End').val(lastDayThisMonth.toISOString().split('T')[0]);
        }

        // Set default dates before initializing tables
        setDefaultDates();

        const keywordsTable = $('#keywordsTable').DataTable({
            scrollX: true,
            autoWidth: false,
            dom: 'Bfrtip',
            order: [[1, 'desc']],
            buttons: [
                {
                    extend: 'excel',
                    text: 'Export to Excel',
                    className: 'btn btn-success btn-sm',
                    exportOptions: {
                        columns: ':visible'
                    }
                }
            ],
            pageLength: 10,
            columns: [
                { data: 'keys.0' },
                { 
                    data: 'impressions',
                    type: 'num'
                },
                { data: 'clicks' },
                { 
                    data: 'ctr',
                    render: function(data) {
                        return (data * 100).toFixed(2) + '%';
                    }
                },
                { 
                    data: 'position',
                    render: function(data) {
                        return data.toFixed(1);
                    }
                }
            ]
        });

        const pagesTable = $('#pagesTable').DataTable({
            scrollX: true,
            autoWidth: false,
            dom: 'Bfrtip',
            order: [[1, 'desc']],
            buttons: [
                {
                    extend: 'excel',
                    text: 'Export to Excel',
                    className: 'btn btn-success btn-sm',
                    exportOptions: {
                        columns: ':visible'
                    }
                }
            ],
            pageLength: 10,
            columns: [
                { data: 'keys.0' },
                { 
                    data: 'clicks',
                    type: 'num'
                },
                { data: 'impressions' },
                { 
                    data: 'ctr',
                    render: function(data) {
                        return (data * 100).toFixed(2) + '%';
                    }
                },
                { 
                    data: 'position',
                    render: function(data) {
                        return data.toFixed(1);
                    }
                }
            ]
        });

        $('#fetchData').click(function() {
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();
            const fetchButton = $(this);

            // Validate dates before fetching
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }

            // Disable button while fetching
            fetchButton.prop('disabled', true);
            fetchButton.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...');

            // Create promises for both requests
            const keywordsPromise = $.get(`/api/gsc-data?type=keywords&startDate=${startDate}&endDate=${endDate}`);
            const pagesPromise = $.get(`/api/gsc-data?type=pages&startDate=${startDate}&endDate=${endDate}`);

            // Wait for both requests to complete
            Promise.all([keywordsPromise, pagesPromise])
                .then(([keywordsResponse, pagesResponse]) => {
                    // Update both tables
                    keywordsTable.clear().rows.add(keywordsResponse.data).draw();
                    pagesTable.clear().rows.add(pagesResponse.data).draw();
                    
                    // Analyze the data
                    analyzeTopData(keywordsResponse.data, pagesResponse.data);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                    alert('Error fetching data. Please try again.');
                })
                .finally(() => {
                    // Re-enable button
                    fetchButton.prop('disabled', false);
                    fetchButton.html('Fetch Data');
                });
        });

        // Function to analyze top data
        function analyzeTopData(keywords, pages) {
            // Combine all data for overall analysis
            const allData = [...keywords, ...pages];
            
            // Get current date range for reference
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();
            
            // Calculate metrics
            const maxImp = allData.reduce((max, curr) => curr.impressions > max.impressions ? curr : max, allData[0]);
            const minImp = allData.reduce((min, curr) => curr.impressions < min.impressions ? curr : min, allData[0]);
            const maxClick = allData.reduce((max, curr) => curr.clicks > max.clicks ? curr : max, allData[0]);
            const minClick = allData.reduce((min, curr) => curr.clicks < min.clicks ? curr : min, allData[0]);
            const totalImp = allData.reduce((sum, curr) => sum + curr.impressions, 0);
            const totalClick = allData.reduce((sum, curr) => sum + curr.clicks, 0);
            const avgPosition = allData.reduce((sum, curr) => sum + curr.position, 0) / allData.length;
            const avgCTR = (totalClick / totalImp) * 100;
            
            // Calculate daily averages
            const days = Math.round((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24)) + 1;
            const avgDailyImp = totalImp / days;
            const avgDailyClick = totalClick / days;
            
            // Update the UI
            $('#maxImp').text(Math.round(maxImp.impressions).toLocaleString());
            $('#minImp').text(Math.round(minImp.impressions).toLocaleString());
            $('#maxClick').text(Math.round(maxClick.clicks).toLocaleString());
            $('#minClick').text(Math.round(minClick.clicks).toLocaleString());
            $('#totalImp').text(Math.round(totalImp).toLocaleString());
            $('#totalClick').text(Math.round(totalClick).toLocaleString());
            $('#avgPosition').text(avgPosition.toFixed(1));
            $('#avgCTR').text(avgCTR.toFixed(2) + '%');
            
            $('#avgDailyImp').text(Math.round(avgDailyImp).toLocaleString());
            $('#avgDailyClick').text(Math.round(avgDailyClick).toLocaleString());
            $('#bestDay').text(`${formatDate(endDate)} (${Math.round(maxImp.impressions).toLocaleString()} impressions)`);
            $('#worstDay').text(`${formatDate(startDate)} (${Math.round(allData[allData.length-1].impressions).toLocaleString()} impressions)`);
        }

        // Initialize comparison chart
        let comparisonChart = null;
        let currentChartData = null;
        let currentMetric = 'impressions';

        // Format date function for tooltips
        const formatDate = (dateStr) => {
            const date = new Date(dateStr);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric',
                month: 'short', 
                day: 'numeric'
            });
        };

        // Function to set date inputs and trigger comparison
        function setDatesAndCompare(dates) {
            $('#period1Start').val(dates.period1Start);
            $('#period1End').val(dates.period1End);
            $('#period2Start').val(dates.period2Start);
            $('#period2End').val(dates.period2End);
            $('#compareData').click();
        }

        // Function to calculate date ranges
        function getDateRanges(period) {
            const today = new Date();
            let period1Start, period1End, period2Start, period2End;

            switch(period) {
                case 'week':
                    // Current week
                    period2End = new Date(today);
                    period2Start = new Date(today);
                    period2Start.setDate(period2End.getDate() - 6); // Last 7 days

                    // Previous week
                    period1End = new Date(period2Start);
                    period1End.setDate(period1End.getDate() - 1);
                    period1Start = new Date(period1End);
                    period1Start.setDate(period1Start.getDate() - 6);
                    break;

                case 'month':
                    // Current month
                    period2End = new Date(today);
                    period2Start = new Date(today);
                    period2Start.setDate(period2End.getDate() - 29); // Last 30 days

                    // Previous month
                    period1End = new Date(period2Start);
                    period1End.setDate(period1End.getDate() - 1);
                    period1Start = new Date(period1End);
                    period1Start.setDate(period1Start.getDate() - 29);
                    break;

                case 'year':
                    // Current year
                    period2End = new Date(today);
                    period2Start = new Date(today);
                    period2Start.setFullYear(period2End.getFullYear() - 1);
                    period2Start.setDate(period2Start.getDate() + 1);

                    // Previous year
                    period1End = new Date(period2Start);
                    period1End.setDate(period1End.getDate() - 1);
                    period1Start = new Date(period1End);
                    period1Start.setFullYear(period1Start.getFullYear() - 1);
                    period1Start.setDate(period1Start.getDate() + 1);
                    break;
            }

            return {
                period1Start: period1Start.toISOString().split('T')[0],
                period1End: period1End.toISOString().split('T')[0],
                period2Start: period2Start.toISOString().split('T')[0],
                period2End: period2End.toISOString().split('T')[0]
            };
        }

        // Handle quick filter clicks
        $('.btn-group .btn').click(function() {
            const period = $(this).data('period');
            const dates = getDateRanges(period);
            setDatesAndCompare(dates);
            
            // Update active state of buttons
            $('.btn-group .btn').removeClass('active');
            $(this).addClass('active');
        });

        function initChart(data) {
            if (comparisonChart) {
                comparisonChart.destroy();
            }

            // Store the data for toggle use
            currentChartData = data;

            // Analysis calculations
            function analyzeData(periodData) {
                const maxImp = periodData.reduce((max, curr) => curr.impressions > max.impressions ? curr : max, periodData[0]);
                const minImp = periodData.reduce((min, curr) => curr.impressions < min.impressions ? curr : min, periodData[0]);
                const maxClick = periodData.reduce((max, curr) => curr.clicks > max.clicks ? curr : max, periodData[0]);
                const minClick = periodData.reduce((min, curr) => curr.clicks < min.clicks ? curr : min, periodData[0]);
                const totalImp = periodData.reduce((sum, curr) => sum + curr.impressions, 0);
                const totalClick = periodData.reduce((sum, curr) => sum + curr.clicks, 0);
                
                return {
                    maxImp,
                    minImp,
                    maxClick,
                    minClick,
                    totalImp,
                    totalClick
                };
            }

            const p1Analysis = analyzeData(data.period1);
            const p2Analysis = analyzeData(data.period2);

            // Update analysis display
            $('#p1MaxImp').text(Math.round(p1Analysis.maxImp.impressions).toLocaleString());
            $('#p1MaxImpDate').text(formatDate(p1Analysis.maxImp.date));
            $('#p1MinImp').text(Math.round(p1Analysis.minImp.impressions).toLocaleString());
            $('#p1MinImpDate').text(formatDate(p1Analysis.minImp.date));
            $('#p1MaxClick').text(Math.round(p1Analysis.maxClick.clicks).toLocaleString());
            $('#p1MaxClickDate').text(formatDate(p1Analysis.maxClick.date));
            $('#p1MinClick').text(Math.round(p1Analysis.minClick.clicks).toLocaleString());
            $('#p1MinClickDate').text(formatDate(p1Analysis.minClick.date));
            $('#p1TotalImp').text(Math.round(p1Analysis.totalImp).toLocaleString());
            $('#p1TotalClick').text(Math.round(p1Analysis.totalClick).toLocaleString());

            $('#p2MaxImp').text(Math.round(p2Analysis.maxImp.impressions).toLocaleString());
            $('#p2MaxImpDate').text(formatDate(p2Analysis.maxImp.date));
            $('#p2MinImp').text(Math.round(p2Analysis.minImp.impressions).toLocaleString());
            $('#p2MinImpDate').text(formatDate(p2Analysis.minImp.date));
            $('#p2MaxClick').text(Math.round(p2Analysis.maxClick.clicks).toLocaleString());
            $('#p2MaxClickDate').text(formatDate(p2Analysis.maxClick.date));
            $('#p2MinClick').text(Math.round(p2Analysis.minClick.clicks).toLocaleString());
            $('#p2MinClickDate').text(formatDate(p2Analysis.minClick.date));
            $('#p2TotalImp').text(Math.round(p2Analysis.totalImp).toLocaleString());
            $('#p2TotalClick').text(Math.round(p2Analysis.totalClick).toLocaleString());

            // Calculate and display percentage changes
            const impChange = ((p2Analysis.totalImp - p1Analysis.totalImp) / p1Analysis.totalImp) * 100;
            const clickChange = ((p2Analysis.totalClick - p1Analysis.totalClick) / p1Analysis.totalClick) * 100;

            $('#impChange').html(`
                <span class="text-${impChange >= 0 ? 'success' : 'danger'}">
                    ${impChange >= 0 ? '↑' : '↓'} ${Math.abs(impChange).toFixed(2)}%
                </span>
            `);
            $('#clickChange').html(`
                <span class="text-${clickChange >= 0 ? 'success' : 'danger'}">
                    ${clickChange >= 0 ? '↑' : '↓'} ${Math.abs(clickChange).toFixed(2)}%
                </span>
            `);

            // Calculate the number of days in each period
            const period1Days = data.period1.length;
            const period2Days = data.period2.length;
            const maxDays = Math.max(period1Days, period2Days);
            
            // Create labels for days (Day 1, Day 2, etc.)
            const labels = Array.from({length: maxDays}, (_, i) => `Day ${i + 1}`);
            
            // Sort data by date for each period
            data.period1.sort((a, b) => new Date(a.date) - new Date(b.date));
            data.period2.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            const metricLabel = currentMetric.charAt(0).toUpperCase() + currentMetric.slice(1);

            const ctx = document.getElementById('comparisonChart').getContext('2d');
            comparisonChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: `Period 1 - ${metricLabel}`,
                            data: data.period1.map((d, i) => ({
                                x: `Day ${i + 1}`,
                                y: d[currentMetric],
                                date: formatDate(d.date),
                                rawDate: d.date
                            })),
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: false
                        },
                        {
                            label: `Period 2 - ${metricLabel}`,
                            data: data.period2.map((d, i) => ({
                                x: `Day ${i + 1}`,
                                y: d[currentMetric],
                                date: formatDate(d.date),
                                rawDate: d.date
                            })),
                            backgroundColor: 'rgba(255, 99, 132, 0.5)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: `${metricLabel} Comparison`,
                            font: {
                                size: 16
                            }
                        },
                        legend: {
                            position: 'top'
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    const dataPoint = context.raw;
                                    return [
                                        `${context.dataset.label}: ${Math.round(dataPoint.y).toLocaleString()}`,
                                        `Date: ${formatDate(dataPoint.rawDate)}`
                                    ];
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Day Number'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: metricLabel
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
        }

        // Handle metric toggle
        $('#metricToggle').change(function() {
            currentMetric = $(this).prop('checked') ? 'clicks' : 'impressions';
            if (currentChartData) {
                initChart(currentChartData);
            }
        });

        $('#compareData').click(function() {
            const period1Start = $('#period1Start').val();
            const period1End = $('#period1End').val();
            const period2Start = $('#period2Start').val();
            const period2End = $('#period2End').val();

            // Validate dates before comparing
            if (!period1Start || !period1End || !period2Start || !period2End) {
                alert('Please select dates for both periods');
                return;
            }

            const compareButton = $(this);
            compareButton.prop('disabled', true);
            compareButton.html('<span class="spinner-border spinner-border-sm"></span> Comparing...');

            // Fetch data for both periods
            Promise.all([
                $.get(`/api/gsc-data?type=comparison&startDate=${period1Start}&endDate=${period1End}`),
                $.get(`/api/gsc-data?type=comparison&startDate=${period2Start}&endDate=${period2End}`)
            ])
            .then(([period1Data, period2Data]) => {
                initChart({
                    period1: period1Data.data,
                    period2: period2Data.data
                });
            })
            .catch(error => {
                console.error('Error fetching comparison data:', error);
                alert('Error comparing periods. Please try again.');
            })
            .finally(() => {
                compareButton.prop('disabled', false);
                compareButton.html('Compare Periods');
            });
        });

        // Initial load
        setTimeout(() => {
            $('#fetchData').click();
        }, 100);
    });
</script>
{{/section}} 