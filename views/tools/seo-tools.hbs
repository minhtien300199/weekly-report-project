<div class="card">
    <div class="card-body">
        <h2 class="card-title mb-4">SEO Tools</h2>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-3" id="seoToolsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" 
                        id="market-share-tab" 
                        data-bs-toggle="tab" 
                        data-bs-target="#market-share" 
                        type="button" 
                        role="tab">
                    Market Share Calculator
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="hemingway-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#hemingway"
                        type="button"
                        role="tab">
                    Hemingway Editor
                </button>
            </li>
            <!-- Add more tabs here in the future -->
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="seoToolsContent">
            <!-- Market Share Calculator Tab -->
            <div class="tab-pane fade show active" id="market-share" role="tabpanel">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Market Share Calculator</h5>
                                <form id="marketShareForm">
                                    <div class="mb-3">
                                        <label class="form-label">Monthly Search Volume</label>
                                        <input type="number" class="form-control" id="searchVolume" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Your Position</label>
                                        <input type="number" class="form-control" id="position" min="1" max="100" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">CTR Model</label>
                                        <select class="form-select" id="ctrModel">
                                            <option value="advanced">Advanced (Considers Featured Snippets)</option>
                                            <option value="conservative">Conservative</option>
                                            <option value="moderate">Moderate</option>
                                        </select>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Calculate</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Results</h5>
                                <div id="results" style="display: none;">
                                    <div class="mb-3">
                                        <label class="form-label">Expected CTR</label>
                                        <h3 id="expectedCtr" class="text-primary">-</h3>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Estimated Monthly Clicks</label>
                                        <h3 id="monthlyClicks" class="text-success">-</h3>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Market Share</label>
                                        <h3 id="marketShare" class="text-info">-</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Hemingway Editor Tab -->
            <div class="tab-pane fade" id="hemingway" role="tabpanel">
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0">Readability Editor</h5>
                                    <div>
                                        <button class="btn btn-outline-secondary me-2" id="clearText">
                                            Clear
                                        </button>
                                        <button class="btn btn-primary" id="analyzeText">
                                            Analyze
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="me-3">
                                                        <div class="display-4 mb-0" id="readabilityGrade">-</div>
                                                        <div class="d-flex align-items-center">
                                                            <small class="text-muted">Grade Level</small>
                                                            <i class="bi bi-info-circle ms-1" 
                                                               data-bs-toggle="tooltip" 
                                                               data-bs-placement="bottom"
                                                               data-bs-html="true"
                                                               title="<div class='tooltip-wide'><strong>What is readability?</strong><br><br>
                                                               Hemingway Editor measures readability using grade levels. The lower the grade level, 
                                                               the more understandable your prose is. Grade 9 is the adult average.<br><br>
                                                               But, low grade levels do not make your writing childish. Instead, they show that 
                                                               complexity isn't getting in the way of your message.<br><br>
                                                               You don't have to fix every highlight. Fix only as many as you need to make the 
                                                               writing more clear.</div>">
                                                            </i>
                                                        </div>
                                                    </div>
                                                    <div class="flex-grow-1 text-end">
                                                        <div class="h5 mb-1" id="readingTime">0 min</div>
                                                        <small class="text-muted">Reading Time</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="row g-2">
                                            <div class="col-md-3 col-6">
                                                <div class="card h-100">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="wordCount">0</div>
                                                        <small class="text-muted">Words</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3 col-6">
                                                <div class="card h-100">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="sentenceCount">0</div>
                                                        <small class="text-muted">Sentences</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3 col-6">
                                                <div class="card h-100">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="paragraphCount">0</div>
                                                        <small class="text-muted">Paragraphs</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-3 col-6">
                                                <div class="card h-100">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="charCount">0</div>
                                                        <small class="text-muted">Characters</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="card h-100 bg-danger bg-opacity-10">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="complexCount">0</div>
                                                        <small class="text-danger">Complex Sentences</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="card h-100 bg-warning bg-opacity-10">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="passiveCount">0</div>
                                                        <small class="text-warning">Passive Voice</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="card h-100 bg-success bg-opacity-10">
                                                    <div class="card-body p-2 text-center">
                                                        <div class="h4 mb-0" id="adverbCount">0</div>
                                                        <small class="text-success">Adverbs</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div id="editor-container">
                                        <div id="editor-highlights"></div>
                                        <textarea class="form-control" id="editor" 
                                                  style="font-size: 16px; line-height: 1.6;"
                                                  placeholder="Paste your text here..."></textarea>
                                    </div>
                                </div>

                                <div id="analysis" class="mt-3">
                                    <div class="mb-3">
                                        <small class="text-muted">
                                            <span class="badge highlight-complex">Red</span> Complex sentences
                                            <span class="badge highlight-passive ms-2">Yellow</span> Passive voice
                                            <span class="badge highlight-adverb ms-2">Green</span> Adverbs
                                        </small>
                                    </div>
                                    <div class="alert alert-info" id="suggestions" style="display: none;">
                                        <!-- Suggestions will be inserted here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
    $(document).ready(function() {
        const ctrModels = {
            advanced: [
                32.5, 17.6, 11.4, 8.1, 6.1, 4.4, 3.5, 3.0, 2.6, 2.4,  // 1-10
                2.0, 1.8, 1.6, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8,    // 11-20
                0.7, 0.7, 0.6, 0.6, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4     // 21-30
            ],
            conservative: [
                28.5, 15.7, 10.3, 7.2, 5.5, 4.1, 3.2, 2.7, 2.3, 2.1,  // 1-10
                1.8, 1.6, 1.4, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6,    // 11-20
                0.6, 0.5, 0.5, 0.4, 0.4, 0.4, 0.3, 0.3, 0.3, 0.3     // 21-30
            ],
            moderate: [
                30.5, 16.6, 10.9, 7.7, 5.8, 4.3, 3.4, 2.9, 2.5, 2.3,  // 1-10
                1.9, 1.7, 1.5, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7,    // 11-20
                0.65, 0.6, 0.55, 0.5, 0.45, 0.45, 0.4, 0.35, 0.35, 0.35 // 21-30
            ]
        };

        $('#marketShareForm').submit(function(e) {
            e.preventDefault();
            
            const searchVolume = parseInt($('#searchVolume').val());
            const position = parseInt($('#position').val());
            const model = $('#ctrModel').val();

            if (position < 1 || position > 100) {
                alert('Position must be between 1 and 100');
                return;
            }

            // Get CTR based on position and model
            let ctr = position <= 30 ? 
                ctrModels[model][position - 1] : 
                0.2; // Default CTR for positions > 30

            const monthlyClicks = Math.round(searchVolume * (ctr / 100));
            const marketShare = (monthlyClicks / searchVolume * 100).toFixed(2);

            // Display results
            $('#expectedCtr').text(ctr.toFixed(1) + '%');
            $('#monthlyClicks').text(monthlyClicks.toLocaleString());
            $('#marketShare').text(marketShare + '%');
            $('#results').show();
        });

        // Hemingway Editor functionality
        const editor = $('#editor');
        
        function countWords(text) {
            return text.trim().split(/\s+/).filter(word => word.length > 0).length;
        }

        function countSentences(text) {
            return text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0).length;
        }

        function countParagraphs(text) {
            return text.split('\n\n').filter(para => para.trim().length > 0).length;
        }

        function calculateReadingTime(wordCount) {
            const wordsPerMinute = 225;
            return Math.ceil(wordCount / wordsPerMinute);
        }

        function detectComplexSentences(text) {
            // Split text into sentences more accurately
            const sentences = text.split(/[.!?]+/)
                .filter(s => s.trim().length > 0)
                .map(s => s.trim());
            
            return sentences.map(sentence => {
                const words = sentence.split(/\s+/).filter(w => w.length > 0);
                
                // Calculate various complexity metrics
                const wordCount = words.length;
                const avgWordLength = words.reduce((sum, word) => sum + word.length, 0) / wordCount;
                const longWords = words.filter(word => word.length > 6).length;
                const longWordRatio = longWords / wordCount;
                
                // Count syllables (basic approximation)
                const syllableCount = words.reduce((count, word) => {
                    return count + countSyllables(word);
                }, 0);
                
                // Calculate average syllables per word
                const avgSyllablesPerWord = syllableCount / wordCount;
                
                // Detect complex phrases
                const complexPhrases = [
                    'in order to',
                    'due to the fact that',
                    'for the purpose of',
                    'in the event that',
                    'with regard to',
                    'in relation to'
                ].some(phrase => sentence.toLowerCase().includes(phrase));
                
                // A sentence is complex if it meets multiple criteria
                const isComplex = (
                    (wordCount > 25 && avgWordLength > 5) || // Long sentences with long words
                    (wordCount > 30) || // Very long sentences
                    (longWordRatio > 0.4 && wordCount > 20) || // Many long words in a long sentence
                    (avgSyllablesPerWord > 2 && wordCount > 20) || // Many complex words in a long sentence
                    complexPhrases // Contains complex phrases
                );
                
                return {
                    text: sentence,
                    isComplex,
                    metrics: {
                        wordCount,
                        avgWordLength,
                        longWordRatio,
                        avgSyllablesPerWord
                    }
                };
            });
        }

        // Helper function to count syllables in a word
        function countSyllables(word) {
            word = word.toLowerCase();
            word = word.replace(/(?:[^laeiouy]|ed|[^laeiouy]e)$/, '');
            word = word.replace(/^y/, '');
            const syllables = word.match(/[aeiouy]{1,2}/g);
            return syllables ? syllables.length : 1;
        }

        function detectPassiveVoice(text) {
            const passivePatterns = [
                /\b(?:am|is|are|was|were|be|been|being)\s+\w+ed\b/gi,
                /\b(?:has|have|had)\s+been\s+\w+ed\b/gi
            ];
            
            let matches = [];
            passivePatterns.forEach(pattern => {
                let match;
                while ((match = pattern.exec(text)) !== null) {
                    matches.push({
                        text: match[0],
                        index: match.index,
                        length: match[0].length
                    });
                }
            });
            return matches;
        }

        function detectAdverbs(text) {
            const adverbPattern = /\w+ly\b/g;
            let matches = [];
            let match;
            while ((match = adverbPattern.exec(text)) !== null) {
                matches.push({
                    text: match[0],
                    index: match.index,
                    length: match[0].length
                });
            }
            return matches;
        }

        function applyHighlights(text) {
            // Create a copy of the text for highlighting
            let highlightedText = text;
            let highlights = [];

            // Detect complex sentences
            const sentences = text.split(/[.!?]+/);
            let currentIndex = 0;
            const complexResults = detectComplexSentences(text);
            complexResults.forEach((result, index) => {
                const sentence = sentences[index];
                if (sentence) {
                    if (result.isComplex) {
                        highlights.push({
                            start: currentIndex,
                            length: sentence.length,
                            type: 'complex'
                        });
                    }
                    currentIndex += sentence.length + 1; // +1 for the delimiter
                }
            });

            // Detect passive voice
            const passiveMatches = detectPassiveVoice(text);
            passiveMatches.forEach(match => {
                highlights.push({
                    start: match.index,
                    length: match.length,
                    type: 'passive'
                });
            });

            // Detect adverbs
            const adverbMatches = detectAdverbs(text);
            adverbMatches.forEach(match => {
                highlights.push({
                    start: match.index,
                    length: match.length,
                    type: 'adverb'
                });
            });

            // Sort highlights by start position (in reverse)
            highlights.sort((a, b) => b.start - a.start);

            // Apply highlights
            highlights.forEach(highlight => {
                const before = highlightedText.substring(0, highlight.start);
                const highlighted = highlightedText.substring(highlight.start, highlight.start + highlight.length);
                const after = highlightedText.substring(highlight.start + highlight.length);
                
                highlightedText = before + 
                                 `<span class="highlight-${highlight.type}">${highlighted}</span>` + 
                                 after;
            });

            return highlightedText;
        }

        function calculateReadabilityGrade(text) {
            const words = text.trim().split(/\s+/).filter(word => word.length > 0);
            const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
            
            if (words.length === 0 || sentences.length === 0) return 0;
            
            const avgWordsPerSentence = words.length / sentences.length;
            const complexWords = words.filter(word => word.length > 6).length;
            const complexityPercentage = (complexWords / words.length) * 100;
            
            return Math.round((avgWordsPerSentence * 0.39) + (complexityPercentage * 0.05));
        }

        function analyzeText() {
            const text = editor.val();
            
            // Apply highlights
            const highlightedText = applyHighlights(text);
            $('#editor-highlights').html(highlightedText);

            const wordCount = countWords(text);
            const sentenceCount = countSentences(text);
            const complexResults = detectComplexSentences(text);
            const complexCount = complexResults.filter(r => r.isComplex).length;
            const passiveCount = detectPassiveVoice(text).length;
            const adverbCount = detectAdverbs(text).length;
            const readabilityGrade = calculateReadabilityGrade(text);
            
            // Update statistics
            $('#wordCount').text(wordCount);
            $('#charCount').text(text.length);
            $('#sentenceCount').text(sentenceCount);
            $('#paragraphCount').text(countParagraphs(text));
            $('#complexCount').text(complexCount);
            $('#passiveCount').text(passiveCount);
            $('#adverbCount').text(adverbCount);
            $('#readingTime').text(`${calculateReadingTime(wordCount)} min`);
            $('#readabilityGrade').text(readabilityGrade);

            // Generate suggestions
            let suggestions = [];
            if (complexCount > 0) {
                suggestions.push(`${complexCount} complex sentence${complexCount > 1 ? 's' : ''} found. Consider simplifying.`);
            }
            if (passiveCount > 0) {
                suggestions.push(`${passiveCount} instance${passiveCount > 1 ? 's' : ''} of passive voice detected. Consider using active voice.`);
            }
            if (adverbCount > wordCount * 0.1) {
                suggestions.push('High number of adverbs detected. Consider using stronger verbs instead.');
            }

            if (suggestions.length > 0) {
                $('#suggestions').html('<ul>' + suggestions.map(s => `<li>${s}</li>`).join('') + '</ul>').show();
            } else {
                $('#suggestions').hide();
            }
        }

        // Event listeners
        editor.on('input', _.debounce(analyzeText, 500));
        $('#analyzeText').click(analyzeText);
        $('#clearText').click(() => {
            editor.val('');
            analyzeText();
        });

        // Function to auto-expand textarea
        function autoExpand(el) {
            // Reset height to allow shrinking
            el.style.height = 'auto';
            // Set new height
            el.style.height = (el.scrollHeight) + 'px';
            // Update highlights container height
            $('#editor-highlights').height(el.scrollHeight);
            $('#editor-container').height(el.scrollHeight);
        }
        
        // Add auto-expand class and remove default resize handle
        editor.addClass('auto-expand');
        
        // Auto-expand on input
        editor.on('input', function() {
            autoExpand(this);
        });
        
        // Auto-expand on paste
        editor.on('paste', function() {
            setTimeout(() => autoExpand(this), 0);
        });
        
        // Initial auto-expand if there's content
        if (editor.val()) {
            autoExpand(editor[0]);
        }

        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>

<style>
    .card {
        border-radius: 8px;
        border: 1px solid rgba(0,0,0,.125);
        box-shadow: 0 1px 3px rgba(0,0,0,.1);
    }
    
    .card-body {
        transition: all 0.3s ease;
    }
    
    .display-4 {
        font-size: 2.5rem;
        font-weight: 300;
        line-height: 1.2;
    }
    
    .h4 {
        font-weight: 500;
    }
    
    .auto-expand {
        min-height: 150px;
        overflow: hidden;
        resize: none;
    }
    
    .highlight-complex {
        background-color: #ffd7d7;  /* Light red for complex sentences */
    }
    .highlight-passive {
        background-color: #fff2cc;  /* Light yellow for passive voice */
    }
    .highlight-adverb {
        background-color: #d9ead3;  /* Light green for adverbs */
    }
    .highlight-readability {
        background-color: #cfe2f3;  /* Light blue for hard to read */
    }
    #editor-container {
        position: relative;
        min-height: 150px;
    }
    #editor-highlights {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        pointer-events: none;
        white-space: pre-wrap;
        word-wrap: break-word;
        color: transparent;
        padding: 6px 12px;
        font-size: 16px;
        line-height: 1.6;
        height: 100%;
    }
    #editor {
        background-color: transparent;
        position: relative;
        z-index: 1;
        height: 100%;
    }

    /* Tooltip styles */
    .tooltip-wide {
        text-align: left;
        max-width: 300px;
        font-size: 0.875rem;
        line-height: 1.5;
    }
    
    .bi-info-circle {
        color: #6c757d;
        cursor: help;
        font-size: 0.875rem;
    }
    
    .tooltip.show {
        opacity: 0.98;
    }
    
    .tooltip-inner {
        max-width: 300px;
        padding: 12px;
        background-color: #2c3e50;
        border-radius: 6px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
</style>
{{/section}} 